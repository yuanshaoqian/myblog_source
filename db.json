{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.gitignore","hash":"5e85fe97e87211619c1db29fd3f3b0dbf16be4a7","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/README.md","hash":"d828af269e0c287e86e7754988466e6f323e3b92","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/_config.yml","hash":"5d11c0944a2a73f1f7bff333a59b4c6c90a71924","modified":1575554191950},{"_id":"source/_posts/C基础.md","hash":"4fe65efd71b52df9c20a0fb028f620396ba5fd77","modified":1575539773604},{"_id":"source/_posts/C基础.md.bak","hash":"d94042de228e4d7392fbcc8622cbfc764dc51bf4","modified":1575539773604},{"_id":"source/_posts/C的变量与常量.md","hash":"9c5c0b9f1c178d1b099fcd965ae66d5149812736","modified":1575539773604},{"_id":"source/_posts/C的变量与常量.md.bak","hash":"01b8db857fb05c4a5b89901ef1c4f1e3648ae94d","modified":1575539773604},{"_id":"source/_posts/C语言数据类型.md","hash":"d719d3bfc57a7fe2049a44cb09240c8a99904647","modified":1575539773604},{"_id":"source/_posts/C语言数据类型.md.bak","hash":"9f65e865e0c57c7936eb39b8d2ef53cd89952a88","modified":1575539773608},{"_id":"source/_posts/DjangoNo-1.md","hash":"4c0ad09a37d752e4325e472ae461523ee38486e5","modified":1575539773604},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1575539773604},{"_id":"source/about/index.md","hash":"1b410336b2d522389d59e3a1a9d0341cb4674e4d","modified":1575554266215},{"_id":"themes/hexo-theme-3-hexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.git/config","hash":"ae50e015eef65bb09f037eba120d07768b55b1cf","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/index","hash":"51b24aa1207eb7898b62008425ff455f5c54fb97","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.git/packed-refs","hash":"b5de02143ab13481760e65797a50c120e34508ee","modified":1575539774524},{"_id":"themes/hexo-theme-3-hexo/layout/index.ejs","hash":"003421f9a57927aa85aa71905313badb0b47820e","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/layout/indexs.md","hash":"e98b27005c0fb0d7618ae3815654ac33f8c02313","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1575539774536},{"_id":"source/about/.ipynb_checkpoints/index-checkpoint.md","hash":"128a0f3246094c37a98913c6e92246f26dfa072b","modified":1575546620326},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1575539774520},{"_id":"themes/hexo-theme-3-hexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1575539774524},{"_id":"themes/hexo-theme-3-hexo/.git/logs/HEAD","hash":"53e1a635ec01b94b5a7515ea9b9cd94489cae204","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/article.ejs","hash":"a0a0f191faafca2aa14abd32ec1b1a385dae1af7","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/article_copyright.ejs","hash":"7f28d7736133cc8012fbb8a5eeeb1174b862aec6","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/dashang.ejs","hash":"1b849749e557d2af482dc49acc93407b72c717f3","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/footer.ejs","hash":"990003870f8c4303bfe0e52d9446265a7c1af676","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/full-toc.ejs","hash":"f39f2ab3a67042e55cd6a51792bfd5ad697808f0","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/nav-left.ejs","hash":"2d36b810293072ce9d7cea82c8a3a987e137b117","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/nav-right.ejs","hash":"301837aa3787004f069206440be25db32e3fb087","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/tag.ejs","hash":"71340ddd60ea14061771463140e299204ecf7ed9","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.jpg","hash":"03d2fc9040e99fb0a023d83f9c9b44b1704425c4","modified":1575545779222},{"_id":"themes/hexo-theme-3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/img/weixin.jpg","hash":"78bf648d8ccd765b208a333f6621309cc9429d09","modified":1575546284216},{"_id":"themes/hexo-theme-3-hexo/.git/objects/pack/pack-e58995235e8928786b64c3df82dba98a1aae246c.idx","hash":"ba9dd3ce695eb469fede2023920bdf98bc46d41f","modified":1575539774524},{"_id":"themes/hexo-theme-3-hexo/.git/refs/heads/master","hash":"26d22e3aa2bcc2d6eb3c0e83ca4d2915ee607d25","modified":1575539774524},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1575539774532},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1575539774536},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nav-left.styl","hash":"1bd865029ba8c11750fff83d87f69e5d7c137928","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/post.styl","hash":"36bcec9a271f969014e1ec6c12c16bf60921d732","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1575539774540},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1575539774544},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1575539774548},{"_id":"themes/hexo-theme-3-hexo/source/img/alipay.jpg","hash":"a316cfeccd985ec9fcf4c4e871d1b8c4b6146edf","modified":1575546267460},{"_id":"themes/hexo-theme-3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1575539774552},{"_id":"themes/hexo-theme-3-hexo/.git/logs/refs/heads/master","hash":"53e1a635ec01b94b5a7515ea9b9cd94489cae204","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1575539774524},{"_id":"themes/hexo-theme-3-hexo/.git/logs/refs/remotes/origin/HEAD","hash":"53e1a635ec01b94b5a7515ea9b9cd94489cae204","modified":1575539774528},{"_id":"themes/hexo-theme-3-hexo/.git/objects/pack/pack-e58995235e8928786b64c3df82dba98a1aae246c.pack","hash":"bb7afb66b960e2f2b517e7a07a068ba651cf846d","modified":1575539774524},{"_id":"public/about/index.html","hash":"cd5086c45c7a50d617f43a3d9d8f8b209840d1d9","modified":1575557910103},{"_id":"public/2019/12/05/hello-world/index.html","hash":"2168fa1feb59b81c76894a7e36989e9e44464c33","modified":1575557910103},{"_id":"public/2019/02/27/DjangoNo-1/index.html","hash":"beb05f11dbec279e329d31c4a00904a4f3410112","modified":1575557910103},{"_id":"public/2019/02/23/C语言数据类型/index.html","hash":"c840ec2f23c72c2c4ec19542eaee314b7d9815e8","modified":1575557910103},{"_id":"public/2019/02/23/C的变量与常量/index.html","hash":"54915536a2f6ac4afe11f456218fb8bb2323fdcf","modified":1575557910103},{"_id":"public/2019/02/23/C基础/index.html","hash":"a458b19a955bf28be3270f5bebf891aacd6cf42a","modified":1575557910104},{"_id":"public/archives/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/archives/2019/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/archives/2019/02/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/archives/2019/12/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/tags/C语言/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/tags/Djago/index.html","hash":"591e5447cb99a2b72a80d5c2cad06f466429e459","modified":1575557910104},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1575557910108},{"_id":"public/img/avatar.jpg","hash":"03d2fc9040e99fb0a023d83f9c9b44b1704425c4","modified":1575557910108},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1575557910108},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1575557910108},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1575557910108},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1575557910108},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1575557910108},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1575557910110},{"_id":"public/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1575557910110},{"_id":"public/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1575557910110},{"_id":"public/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1575557910110},{"_id":"public/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1575557910110},{"_id":"public/img/weixin.jpg","hash":"78bf648d8ccd765b208a333f6621309cc9429d09","modified":1575557910625},{"_id":"public/css/mobile.css","hash":"79ab291be160e0ca753512a96c5198f7477f13be","modified":1575557910635},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1575557910635},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1575557910635},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1575557910635},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1575557910635},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1575557910635},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1575557910635},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1575557910636},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1575557910636},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1575557910636},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1575557910636},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1575557910636},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1575557910636},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1575557910636},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1575557910636},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1575557910636},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1575557910636},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1575557910636},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1575557910636},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1575557910636},{"_id":"public/css/style.css","hash":"fa10daca27f2163644aa8c14b0fca5aba9d14b06","modified":1575557910636},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1575557910636},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1575557910637},{"_id":"public/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1575557910637},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1575557910637},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1575557910637},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1575557910637},{"_id":"public/img/alipay.jpg","hash":"a316cfeccd985ec9fcf4c4e871d1b8c4b6146edf","modified":1575557910637}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2019-12-05T11:48:04.000Z","on":true,"url":"/about","type":1,"_content":"\n# E-mail:yuanshaoqiancom@gmail.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-05 19:48:04\non: true\nurl: /about\ntype: 1\n---\n\n# E-mail:yuanshaoqiancom@gmail.com\n","updated":"2019-12-05T13:57:46.215Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3suhzje0001eofhi4xkv1rr","content":"<h1 id=\"E-mail-yuanshaoqiancom-gmail-com\"><a href=\"#E-mail-yuanshaoqiancom-gmail-com\" class=\"headerlink\" title=\"E-mail:yuanshaoqiancom@gmail.com\"></a>E-mail:<a href=\"mailto:yuanshaoqiancom@gmail.com\" target=\"_blank\" rel=\"noopener\">yuanshaoqiancom@gmail.com</a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"E-mail-yuanshaoqiancom-gmail-com\"><a href=\"#E-mail-yuanshaoqiancom-gmail-com\" class=\"headerlink\" title=\"E-mail:yuanshaoqiancom@gmail.com\"></a>E-mail:<a href=\"mailto:yuanshaoqiancom@gmail.com\" target=\"_blank\" rel=\"noopener\">yuanshaoqiancom@gmail.com</a></h1>"}],"Post":[{"title":"C基础","date":"2019-02-23T13:00:32.000Z","_content":"\n##编写简单的C程序HelloWorld\n```C\n#include<stdio.h>\nint main()\n{\n\tprintf(\"Hello World!\\n\");\n\treturn 0;\n}\n```\n\n程序讲解：\n\n```C\n#include<stdio.h>//标准I/O头文件，下文中的printf需要使用这个文件\nmain()//主函数，一个程序的入口。一个程序有且只有一个main()函数\nint//代表主函数的返回值类型是int型\nprintf()//格式化输出，将括号内的内容打印到显示器上，打印字符串需要用双引号\"\"引上\nreturn 0;//配合主函数类型使用，一般来说返回0的程序表示程序运行成功\n```\n\n编译器GCC：把程序代码变成可执行程序\nXXXX.c变成可执行程序步骤：\n⒈gcc XXXX.c -o XXXX\n-o的作用：生成的产物的名字\n⒉如果不加-o和名字，则默认生成a.out文件\ngcc XXXX.c\n则生成为a.out\n⒊make XXXX\n等价于gcc XXXX.c -o XXXX\n\n执行该程序：\n./XXXX（./a.out）\n\n\n### C语言从代码变成可执行程序的步骤：\n\n> 预处理 -----> 编译 -----> 汇编 -----> 链接\n\n<font size=\"5\">\n⒈预处理：去掉注释，加载头文件，代替宏定义，条件编译\n所需文件：.c文件\n生成文件以.i结尾\n使用方法：gcc XXXX.c -E -o XXXX.i\n⒉编译：使用编译器进行C语言的语法检查，如果有语法错误，报错，并结束编译过程;如果没有语法错误，把C的源程序转变为汇编代码\n需要文件：.i文件\n生成产物：汇编文件（以.s结尾）\n使用方法：gcc XXXX.i -S -o XXXX.s\n可以使用vim打开汇编文件来查看生成产物\n⒊汇编：把汇编源文件通过汇编器生成目标文件（二进制机器语言）\n需要文件：.s文件\n生成产物：机器码（或称为“目标代码”，以.o结尾）\n使用方法：gcc XXXX.s -c -o XXXX.o\n可以使用vim打开目标代码文件来查看生成产物（不过只会看到乱码）\n⒋链接：把目标文件执行所依赖的所有二进制的其他目标文件及C的库文件都整合成一个可执行文件的过程\n需要文件：.o文件及各种动态库或静态库\n生成产物：可执行程序\n使用方法：gcc XXXX.o -o XXXX\n-o：指定生成的产物的名字\n-Wall：让编译器报告全部错误\n通常使用\ngcc XXXX.c -o hello -Wall\n编译完成后（无error，无warning），会生成-o之后的文件（如没有加-o则会生成a.out文件）\n执行文件：\n./XXXX（./a.out）</font>\n\n---------\n\n<font size=\"5\">\n```C\n1、基本数据类型\nvoid：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）\nchar：字符型类型数据，属于整型数据的一种。（K&R时期引入）\nint：整型数据，表示范围通常为编译器指定的内存字节长。（K&R时期引入）\nfloat：单精度浮点型数据，属于浮点数据的一种。（K&R时期引入）\ndouble：双精度浮点型数据，属于浮点数据的一种。（K&R时期引入）\n//_Bool:布尔型（C99标准新增）\n//_Complex:复数的基本类型（C99标准新增）\n//_Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）\n//_Generic:提供重载的接口入口（C11标准新增）\n2、类型修饰关键字\nshort：修饰int，短整型数据，可省略被修饰的int。（K&R时期引入）\nlong：修饰int，长整型数据，可省略被修饰的int。（K&R时期引入）\n//long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）\nsigned：修饰整型数据，有符号数据类型。（C89标准新增）\nunsigned：修饰整型数据，无符号数据类型。（K&R时期引入）\n//restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）\n3、复杂类型关键字\nstruct：结构体声明。（K&R时期引入）\nunion：联合体声明。（K&R时期引入）\nenum：枚举声明。（C89标准新增）\ntypedef：声明类型别名。（K&R时期引入）\nsizeof：得到特定类型或特定类型变量的大小。（K&R时期引入）\n//inline:内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）\n4、存储级别关键字\nauto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与static相反。当变量未指定时默认为auto。（K&R时期引入）\nstatic：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&R时期引入）\nregister：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&R时期引入）\nextern：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&R时期引入）\nconst：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）\nvolatile：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）\n5、流程控制关键字\n1）跳转结构\nreturn：用在函数体中，返回特定值（如果是void类型，则不返回函数值）。（K&R时期引入）\ncontinue：结束当前循环，开始下一轮循环。（K&R时期引入）\nbreak：跳出当前循环或switch结构。（K&R时期引入）\ngoto：无条件跳转语句。（K&R时期引入）\n2）分支结构\nif：条件语句，后面不需要放分号。（K&R时期引入）\nelse：条件语句否定分支（必须与if连用）。（K&R时期引入）\nswitch：开关语句（多重分支语句）。（K&R时期引入）\ncase：开关语句中的分支标记，与switch连用。（K&R时期引入）\ndefault：开关语句中的“其他”分支，可选。（K&R时期引入）\nfor：循环（K&R时期引入）\nwhile：循环（K&R时期引入）\n```\n<font>\n","source":"_posts/C基础.md","raw":"---\ntitle: C基础\ndate: 2019-02-23 21:00:32\ntags: C语言\n---\n\n##编写简单的C程序HelloWorld\n```C\n#include<stdio.h>\nint main()\n{\n\tprintf(\"Hello World!\\n\");\n\treturn 0;\n}\n```\n\n程序讲解：\n\n```C\n#include<stdio.h>//标准I/O头文件，下文中的printf需要使用这个文件\nmain()//主函数，一个程序的入口。一个程序有且只有一个main()函数\nint//代表主函数的返回值类型是int型\nprintf()//格式化输出，将括号内的内容打印到显示器上，打印字符串需要用双引号\"\"引上\nreturn 0;//配合主函数类型使用，一般来说返回0的程序表示程序运行成功\n```\n\n编译器GCC：把程序代码变成可执行程序\nXXXX.c变成可执行程序步骤：\n⒈gcc XXXX.c -o XXXX\n-o的作用：生成的产物的名字\n⒉如果不加-o和名字，则默认生成a.out文件\ngcc XXXX.c\n则生成为a.out\n⒊make XXXX\n等价于gcc XXXX.c -o XXXX\n\n执行该程序：\n./XXXX（./a.out）\n\n\n### C语言从代码变成可执行程序的步骤：\n\n> 预处理 -----> 编译 -----> 汇编 -----> 链接\n\n<font size=\"5\">\n⒈预处理：去掉注释，加载头文件，代替宏定义，条件编译\n所需文件：.c文件\n生成文件以.i结尾\n使用方法：gcc XXXX.c -E -o XXXX.i\n⒉编译：使用编译器进行C语言的语法检查，如果有语法错误，报错，并结束编译过程;如果没有语法错误，把C的源程序转变为汇编代码\n需要文件：.i文件\n生成产物：汇编文件（以.s结尾）\n使用方法：gcc XXXX.i -S -o XXXX.s\n可以使用vim打开汇编文件来查看生成产物\n⒊汇编：把汇编源文件通过汇编器生成目标文件（二进制机器语言）\n需要文件：.s文件\n生成产物：机器码（或称为“目标代码”，以.o结尾）\n使用方法：gcc XXXX.s -c -o XXXX.o\n可以使用vim打开目标代码文件来查看生成产物（不过只会看到乱码）\n⒋链接：把目标文件执行所依赖的所有二进制的其他目标文件及C的库文件都整合成一个可执行文件的过程\n需要文件：.o文件及各种动态库或静态库\n生成产物：可执行程序\n使用方法：gcc XXXX.o -o XXXX\n-o：指定生成的产物的名字\n-Wall：让编译器报告全部错误\n通常使用\ngcc XXXX.c -o hello -Wall\n编译完成后（无error，无warning），会生成-o之后的文件（如没有加-o则会生成a.out文件）\n执行文件：\n./XXXX（./a.out）</font>\n\n---------\n\n<font size=\"5\">\n```C\n1、基本数据类型\nvoid：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）\nchar：字符型类型数据，属于整型数据的一种。（K&R时期引入）\nint：整型数据，表示范围通常为编译器指定的内存字节长。（K&R时期引入）\nfloat：单精度浮点型数据，属于浮点数据的一种。（K&R时期引入）\ndouble：双精度浮点型数据，属于浮点数据的一种。（K&R时期引入）\n//_Bool:布尔型（C99标准新增）\n//_Complex:复数的基本类型（C99标准新增）\n//_Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）\n//_Generic:提供重载的接口入口（C11标准新增）\n2、类型修饰关键字\nshort：修饰int，短整型数据，可省略被修饰的int。（K&R时期引入）\nlong：修饰int，长整型数据，可省略被修饰的int。（K&R时期引入）\n//long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）\nsigned：修饰整型数据，有符号数据类型。（C89标准新增）\nunsigned：修饰整型数据，无符号数据类型。（K&R时期引入）\n//restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）\n3、复杂类型关键字\nstruct：结构体声明。（K&R时期引入）\nunion：联合体声明。（K&R时期引入）\nenum：枚举声明。（C89标准新增）\ntypedef：声明类型别名。（K&R时期引入）\nsizeof：得到特定类型或特定类型变量的大小。（K&R时期引入）\n//inline:内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）\n4、存储级别关键字\nauto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与static相反。当变量未指定时默认为auto。（K&R时期引入）\nstatic：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&R时期引入）\nregister：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&R时期引入）\nextern：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&R时期引入）\nconst：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）\nvolatile：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）\n5、流程控制关键字\n1）跳转结构\nreturn：用在函数体中，返回特定值（如果是void类型，则不返回函数值）。（K&R时期引入）\ncontinue：结束当前循环，开始下一轮循环。（K&R时期引入）\nbreak：跳出当前循环或switch结构。（K&R时期引入）\ngoto：无条件跳转语句。（K&R时期引入）\n2）分支结构\nif：条件语句，后面不需要放分号。（K&R时期引入）\nelse：条件语句否定分支（必须与if连用）。（K&R时期引入）\nswitch：开关语句（多重分支语句）。（K&R时期引入）\ncase：开关语句中的分支标记，与switch连用。（K&R时期引入）\ndefault：开关语句中的“其他”分支，可选。（K&R时期引入）\nfor：循环（K&R时期引入）\nwhile：循环（K&R时期引入）\n```\n<font>\n","slug":"C基础","published":1,"updated":"2019-12-05T09:56:13.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3suhzj90000eofh5bp1hrsg","content":"<p>##编写简单的C程序HelloWorld<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>程序讲解：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;//标准I/O头文件，下文中的printf需要使用这个文件</span></span></span><br><span class=\"line\">main()<span class=\"comment\">//主函数，一个程序的入口。一个程序有且只有一个main()函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span><span class=\"comment\">//代表主函数的返回值类型是int型</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>()<span class=\"comment\">//格式化输出，将括号内的内容打印到显示器上，打印字符串需要用双引号\"\"引上</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//配合主函数类型使用，一般来说返回0的程序表示程序运行成功</span></span><br></pre></td></tr></table></figure>\n<p>编译器GCC：把程序代码变成可执行程序<br>XXXX.c变成可执行程序步骤：<br>⒈gcc XXXX.c -o XXXX<br>-o的作用：生成的产物的名字<br>⒉如果不加-o和名字，则默认生成a.out文件<br>gcc XXXX.c<br>则生成为a.out<br>⒊make XXXX<br>等价于gcc XXXX.c -o XXXX</p>\n<p>执行该程序：<br>./XXXX（./a.out）</p>\n<h3 id=\"C语言从代码变成可执行程序的步骤：\"><a href=\"#C语言从代码变成可执行程序的步骤：\" class=\"headerlink\" title=\"C语言从代码变成可执行程序的步骤：\"></a>C语言从代码变成可执行程序的步骤：</h3><blockquote>\n<p>预处理 —–&gt; 编译 —–&gt; 汇编 —–&gt; 链接</p>\n</blockquote>\n<font size=\"5\"><br>⒈预处理：去掉注释，加载头文件，代替宏定义，条件编译<br>所需文件：.c文件<br>生成文件以.i结尾<br>使用方法：gcc XXXX.c -E -o XXXX.i<br>⒉编译：使用编译器进行C语言的语法检查，如果有语法错误，报错，并结束编译过程;如果没有语法错误，把C的源程序转变为汇编代码<br>需要文件：.i文件<br>生成产物：汇编文件（以.s结尾）<br>使用方法：gcc XXXX.i -S -o XXXX.s<br>可以使用vim打开汇编文件来查看生成产物<br>⒊汇编：把汇编源文件通过汇编器生成目标文件（二进制机器语言）<br>需要文件：.s文件<br>生成产物：机器码（或称为“目标代码”，以.o结尾）<br>使用方法：gcc XXXX.s -c -o XXXX.o<br>可以使用vim打开目标代码文件来查看生成产物（不过只会看到乱码）<br>⒋链接：把目标文件执行所依赖的所有二进制的其他目标文件及C的库文件都整合成一个可执行文件的过程<br>需要文件：.o文件及各种动态库或静态库<br>生成产物：可执行程序<br>使用方法：gcc XXXX.o -o XXXX<br>-o：指定生成的产物的名字<br>-Wall：让编译器报告全部错误<br>通常使用<br>gcc XXXX.c -o hello -Wall<br>编译完成后（无error，无warning），会生成-o之后的文件（如没有加-o则会生成a.out文件）<br>执行文件：<br>./XXXX（./a.out）</font>\n\n<hr>\n<p><font size=\"5\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、基本数据类型</span><br><span class=\"line\"><span class=\"keyword\">void</span>：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">char</span>：字符型类型数据，属于整型数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">int</span>：整型数据，表示范围通常为编译器指定的内存字节长。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">float</span>：单精度浮点型数据，属于浮点数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">double</span>：双精度浮点型数据，属于浮点数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//_Bool:布尔型（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Complex:复数的基本类型（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Generic:提供重载的接口入口（C11标准新增）</span></span><br><span class=\"line\"><span class=\"number\">2</span>、类型修饰关键字</span><br><span class=\"line\"><span class=\"keyword\">short</span>：修饰<span class=\"keyword\">int</span>，短整型数据，可省略被修饰的<span class=\"keyword\">int</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">long</span>：修饰<span class=\"keyword\">int</span>，长整型数据，可省略被修饰的<span class=\"keyword\">int</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）</span></span><br><span class=\"line\"><span class=\"keyword\">signed</span>：修饰整型数据，有符号数据类型。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span>：修饰整型数据，无符号数据类型。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）</span></span><br><span class=\"line\"><span class=\"number\">3</span>、复杂类型关键字</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>：结构体声明。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">union</span>：联合体声明。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">enum</span>：枚举声明。（<span class=\"title\">C89</span>标准新增）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typedef</span>：声明类型别名。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sizeof</span>：得到特定类型或特定类型变量的大小。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\">//<span class=\"title\">inline</span>:</span>内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）</span><br><span class=\"line\"><span class=\"number\">4</span>、存储级别关键字</span><br><span class=\"line\"><span class=\"keyword\">auto</span>：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与<span class=\"keyword\">static</span>相反。当变量未指定时默认为<span class=\"keyword\">auto</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">static</span>：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">register</span>：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">extern</span>：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">const</span>：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">volatile</span>：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）</span><br><span class=\"line\"><span class=\"number\">5</span>、流程控制关键字</span><br><span class=\"line\"><span class=\"number\">1</span>）跳转结构</span><br><span class=\"line\"><span class=\"keyword\">return</span>：用在函数体中，返回特定值（如果是<span class=\"keyword\">void</span>类型，则不返回函数值）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">continue</span>：结束当前循环，开始下一轮循环。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">break</span>：跳出当前循环或<span class=\"keyword\">switch</span>结构。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">goto</span>：无条件跳转语句。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"number\">2</span>）分支结构</span><br><span class=\"line\"><span class=\"keyword\">if</span>：条件语句，后面不需要放分号。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">else</span>：条件语句否定分支（必须与<span class=\"keyword\">if</span>连用）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">switch</span>：开关语句（多重分支语句）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">case</span>：开关语句中的分支标记，与<span class=\"keyword\">switch</span>连用。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">default</span>：开关语句中的“其他”分支，可选。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">for</span>：循环（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">while</span>：循环（K&amp;R时期引入）</span><br></pre></td></tr></table></figure></font></p>\n<font>\n</font>","site":{"data":{}},"excerpt":"","more":"<p>##编写简单的C程序HelloWorld<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>程序讲解：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;//标准I/O头文件，下文中的printf需要使用这个文件</span></span></span><br><span class=\"line\">main()<span class=\"comment\">//主函数，一个程序的入口。一个程序有且只有一个main()函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span><span class=\"comment\">//代表主函数的返回值类型是int型</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>()<span class=\"comment\">//格式化输出，将括号内的内容打印到显示器上，打印字符串需要用双引号\"\"引上</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//配合主函数类型使用，一般来说返回0的程序表示程序运行成功</span></span><br></pre></td></tr></table></figure>\n<p>编译器GCC：把程序代码变成可执行程序<br>XXXX.c变成可执行程序步骤：<br>⒈gcc XXXX.c -o XXXX<br>-o的作用：生成的产物的名字<br>⒉如果不加-o和名字，则默认生成a.out文件<br>gcc XXXX.c<br>则生成为a.out<br>⒊make XXXX<br>等价于gcc XXXX.c -o XXXX</p>\n<p>执行该程序：<br>./XXXX（./a.out）</p>\n<h3 id=\"C语言从代码变成可执行程序的步骤：\"><a href=\"#C语言从代码变成可执行程序的步骤：\" class=\"headerlink\" title=\"C语言从代码变成可执行程序的步骤：\"></a>C语言从代码变成可执行程序的步骤：</h3><blockquote>\n<p>预处理 —–&gt; 编译 —–&gt; 汇编 —–&gt; 链接</p>\n</blockquote>\n<font size=\"5\"><br>⒈预处理：去掉注释，加载头文件，代替宏定义，条件编译<br>所需文件：.c文件<br>生成文件以.i结尾<br>使用方法：gcc XXXX.c -E -o XXXX.i<br>⒉编译：使用编译器进行C语言的语法检查，如果有语法错误，报错，并结束编译过程;如果没有语法错误，把C的源程序转变为汇编代码<br>需要文件：.i文件<br>生成产物：汇编文件（以.s结尾）<br>使用方法：gcc XXXX.i -S -o XXXX.s<br>可以使用vim打开汇编文件来查看生成产物<br>⒊汇编：把汇编源文件通过汇编器生成目标文件（二进制机器语言）<br>需要文件：.s文件<br>生成产物：机器码（或称为“目标代码”，以.o结尾）<br>使用方法：gcc XXXX.s -c -o XXXX.o<br>可以使用vim打开目标代码文件来查看生成产物（不过只会看到乱码）<br>⒋链接：把目标文件执行所依赖的所有二进制的其他目标文件及C的库文件都整合成一个可执行文件的过程<br>需要文件：.o文件及各种动态库或静态库<br>生成产物：可执行程序<br>使用方法：gcc XXXX.o -o XXXX<br>-o：指定生成的产物的名字<br>-Wall：让编译器报告全部错误<br>通常使用<br>gcc XXXX.c -o hello -Wall<br>编译完成后（无error，无warning），会生成-o之后的文件（如没有加-o则会生成a.out文件）<br>执行文件：<br>./XXXX（./a.out）</font>\n\n<hr>\n<p><font size=\"5\"><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、基本数据类型</span><br><span class=\"line\"><span class=\"keyword\">void</span>：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">char</span>：字符型类型数据，属于整型数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">int</span>：整型数据，表示范围通常为编译器指定的内存字节长。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">float</span>：单精度浮点型数据，属于浮点数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">double</span>：双精度浮点型数据，属于浮点数据的一种。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//_Bool:布尔型（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Complex:复数的基本类型（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）</span></span><br><span class=\"line\"><span class=\"comment\">//_Generic:提供重载的接口入口（C11标准新增）</span></span><br><span class=\"line\"><span class=\"number\">2</span>、类型修饰关键字</span><br><span class=\"line\"><span class=\"keyword\">short</span>：修饰<span class=\"keyword\">int</span>，短整型数据，可省略被修饰的<span class=\"keyword\">int</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">long</span>：修饰<span class=\"keyword\">int</span>，长整型数据，可省略被修饰的<span class=\"keyword\">int</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）</span></span><br><span class=\"line\"><span class=\"keyword\">signed</span>：修饰整型数据，有符号数据类型。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span>：修饰整型数据，无符号数据类型。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"comment\">//restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）</span></span><br><span class=\"line\"><span class=\"number\">3</span>、复杂类型关键字</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>：结构体声明。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">union</span>：联合体声明。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">enum</span>：枚举声明。（<span class=\"title\">C89</span>标准新增）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typedef</span>：声明类型别名。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sizeof</span>：得到特定类型或特定类型变量的大小。（<span class=\"title\">K</span>&amp;<span class=\"title\">R</span>时期引入）</span></span><br><span class=\"line\"><span class=\"class\">//<span class=\"title\">inline</span>:</span>内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）</span><br><span class=\"line\"><span class=\"number\">4</span>、存储级别关键字</span><br><span class=\"line\"><span class=\"keyword\">auto</span>：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与<span class=\"keyword\">static</span>相反。当变量未指定时默认为<span class=\"keyword\">auto</span>。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">static</span>：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">register</span>：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">extern</span>：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">const</span>：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）</span><br><span class=\"line\"><span class=\"keyword\">volatile</span>：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）</span><br><span class=\"line\"><span class=\"number\">5</span>、流程控制关键字</span><br><span class=\"line\"><span class=\"number\">1</span>）跳转结构</span><br><span class=\"line\"><span class=\"keyword\">return</span>：用在函数体中，返回特定值（如果是<span class=\"keyword\">void</span>类型，则不返回函数值）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">continue</span>：结束当前循环，开始下一轮循环。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">break</span>：跳出当前循环或<span class=\"keyword\">switch</span>结构。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">goto</span>：无条件跳转语句。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"number\">2</span>）分支结构</span><br><span class=\"line\"><span class=\"keyword\">if</span>：条件语句，后面不需要放分号。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">else</span>：条件语句否定分支（必须与<span class=\"keyword\">if</span>连用）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">switch</span>：开关语句（多重分支语句）。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">case</span>：开关语句中的分支标记，与<span class=\"keyword\">switch</span>连用。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">default</span>：开关语句中的“其他”分支，可选。（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">for</span>：循环（K&amp;R时期引入）</span><br><span class=\"line\"><span class=\"keyword\">while</span>：循环（K&amp;R时期引入）</span><br></pre></td></tr></table></figure></font></p>\n<font>\n</font>"},{"title":"C的变量与常量","date":"2019-02-23T13:04:16.000Z","_content":"\n# 变量\n使用<font color=\"blue\">printf()</font>来打印变量的值。\n要打印a中的值10：<font color=\"blue\">printf(\"%d\\n\",a);</font>\n<font color=\"red\">%d</font>代表十进制输出一个整数。\n### 变量值简单交换\n```C\n#include<stdio.h>\nint main()\n{\n\tint a,b,tmp;\n\ta = 1;\n\tb = 2;\n\ttmp = a;\n\ta = b;\n\tb = tmp;\n\tprintf(\"a is %d\\n\",a);\n\tprintf(\"b is %d\\n\",b);\n\treturn 0;\n}\n```\n\n# 常量\n在程序执行过程中，其值不被改变的量\n\n直接常量：直接引用的数字等；\n符号常量：使用标识符来代替一个数字（常见的：宏定义常量 和 常变量）\n宏定义：又称为宏代换，是定义一个标识符来代表一个值或一个表达式\n\n```C\n#define XXXX 10\n```\n宏定义也可定义表达式：\n```C\n#define ADD(a,b) (a)+(b)\n#define MUL(a,b) (a)*(b)\n```\n<font color=\"red\">注意：如果要使用宏定义来代替表达式，需要在每个表达式的变量都加上括号以防止出现计算错误</font>\n```C\n#include<stdio.h>\n#define FUN1(a,b) a * b\n#define FUN2(a,b) (a)*(b)\nint main()\n{\n\tint a=2;\n\tint b=3;\n\tprintf(\"%d\\n\",FUN1(a+b,b+a));\n\tprintf(\"%d\\n\",FUN2(a+b,b+a));\n\treturn 0;\n}\n执行程序，输出：\n13\n25\n答案：\nFUN1的宏替换会变成：a+b*b+a\nFUN2的宏替换会变成：(a+b)*(b+a)\n因此两个宏替换会得到不同的结果。\n```\n# 常变量\n变量值不可改变的量，使用const修饰\n<font color=\"red\">注意：const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。</font>\n<br>\n常变量与宏定义常量的区别：宏定义常量是在预处理阶段，使用宏名来代替宏值。而常变量是在程序运行时，程序在内存分配的一个变量，只不过变量不允许再次赋值。\n<br>\n常量与后缀：\n有时候我们需要显式地表示出常量的类型，这时候我们可以在常量后加后缀\nu或U：unsigned类型，如123u\nl或L：long类型，如123l\nll或LL：long long类型，如123456ll\nf或F：float类型，如0.123f\n<br>\n","source":"_posts/C的变量与常量.md","raw":"---\ntitle: C的变量与常量\ndate: 2019-02-23 21:04:16\ntags: C语言\n---\n\n# 变量\n使用<font color=\"blue\">printf()</font>来打印变量的值。\n要打印a中的值10：<font color=\"blue\">printf(\"%d\\n\",a);</font>\n<font color=\"red\">%d</font>代表十进制输出一个整数。\n### 变量值简单交换\n```C\n#include<stdio.h>\nint main()\n{\n\tint a,b,tmp;\n\ta = 1;\n\tb = 2;\n\ttmp = a;\n\ta = b;\n\tb = tmp;\n\tprintf(\"a is %d\\n\",a);\n\tprintf(\"b is %d\\n\",b);\n\treturn 0;\n}\n```\n\n# 常量\n在程序执行过程中，其值不被改变的量\n\n直接常量：直接引用的数字等；\n符号常量：使用标识符来代替一个数字（常见的：宏定义常量 和 常变量）\n宏定义：又称为宏代换，是定义一个标识符来代表一个值或一个表达式\n\n```C\n#define XXXX 10\n```\n宏定义也可定义表达式：\n```C\n#define ADD(a,b) (a)+(b)\n#define MUL(a,b) (a)*(b)\n```\n<font color=\"red\">注意：如果要使用宏定义来代替表达式，需要在每个表达式的变量都加上括号以防止出现计算错误</font>\n```C\n#include<stdio.h>\n#define FUN1(a,b) a * b\n#define FUN2(a,b) (a)*(b)\nint main()\n{\n\tint a=2;\n\tint b=3;\n\tprintf(\"%d\\n\",FUN1(a+b,b+a));\n\tprintf(\"%d\\n\",FUN2(a+b,b+a));\n\treturn 0;\n}\n执行程序，输出：\n13\n25\n答案：\nFUN1的宏替换会变成：a+b*b+a\nFUN2的宏替换会变成：(a+b)*(b+a)\n因此两个宏替换会得到不同的结果。\n```\n# 常变量\n变量值不可改变的量，使用const修饰\n<font color=\"red\">注意：const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。</font>\n<br>\n常变量与宏定义常量的区别：宏定义常量是在预处理阶段，使用宏名来代替宏值。而常变量是在程序运行时，程序在内存分配的一个变量，只不过变量不允许再次赋值。\n<br>\n常量与后缀：\n有时候我们需要显式地表示出常量的类型，这时候我们可以在常量后加后缀\nu或U：unsigned类型，如123u\nl或L：long类型，如123l\nll或LL：long long类型，如123456ll\nf或F：float类型，如0.123f\n<br>\n","slug":"C的变量与常量","published":1,"updated":"2019-12-05T09:56:13.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3suhzjf0002eofhxpl4p769","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>使用<font color=\"blue\">printf()</font>来打印变量的值。<br>要打印a中的值10：<font color=\"blue\">printf(“%d\\n”,a);</font></p>\n<p><font color=\"red\">%d</font>代表十进制输出一个整数。</p>\n<h3 id=\"变量值简单交换\"><a href=\"#变量值简单交换\" class=\"headerlink\" title=\"变量值简单交换\"></a>变量值简单交换</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,tmp;</span><br><span class=\"line\">\ta = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">2</span>;</span><br><span class=\"line\">\ttmp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a is %d\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b is %d\\n\"</span>,b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><p>在程序执行过程中，其值不被改变的量</p>\n<p>直接常量：直接引用的数字等；<br>符号常量：使用标识符来代替一个数字（常见的：宏定义常量 和 常变量）<br>宏定义：又称为宏代换，是定义一个标识符来代表一个值或一个表达式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> XXXX 10</span></span><br></pre></td></tr></table></figure>\n<p>宏定义也可定义表达式：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD(a,b) (a)+(b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MUL(a,b) (a)*(b)</span></span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\">注意：如果要使用宏定义来代替表达式，需要在每个表达式的变量都加上括号以防止出现计算错误</font><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN1(a,b) a * b</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN2(a,b) (a)*(b)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,FUN1(a+b,b+a));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,FUN2(a+b,b+a));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行程序，输出：</span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\">答案：</span><br><span class=\"line\">FUN1的宏替换会变成：a+b*b+a</span><br><span class=\"line\">FUN2的宏替换会变成：(a+b)*(b+a)</span><br><span class=\"line\">因此两个宏替换会得到不同的结果。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"常变量\"><a href=\"#常变量\" class=\"headerlink\" title=\"常变量\"></a>常变量</h1><p>变量值不可改变的量，使用const修饰</p>\n<p><font color=\"red\">注意：const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。</font><br><br><br>常变量与宏定义常量的区别：宏定义常量是在预处理阶段，使用宏名来代替宏值。而常变量是在程序运行时，程序在内存分配的一个变量，只不过变量不允许再次赋值。<br><br><br>常量与后缀：<br>有时候我们需要显式地表示出常量的类型，这时候我们可以在常量后加后缀<br>u或U：unsigned类型，如123u<br>l或L：long类型，如123l<br>ll或LL：long long类型，如123456ll<br>f或F：float类型，如0.123f<br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>使用<font color=\"blue\">printf()</font>来打印变量的值。<br>要打印a中的值10：<font color=\"blue\">printf(“%d\\n”,a);</font></p>\n<p><font color=\"red\">%d</font>代表十进制输出一个整数。</p>\n<h3 id=\"变量值简单交换\"><a href=\"#变量值简单交换\" class=\"headerlink\" title=\"变量值简单交换\"></a>变量值简单交换</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,tmp;</span><br><span class=\"line\">\ta = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">2</span>;</span><br><span class=\"line\">\ttmp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = tmp;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a is %d\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b is %d\\n\"</span>,b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h1><p>在程序执行过程中，其值不被改变的量</p>\n<p>直接常量：直接引用的数字等；<br>符号常量：使用标识符来代替一个数字（常见的：宏定义常量 和 常变量）<br>宏定义：又称为宏代换，是定义一个标识符来代表一个值或一个表达式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> XXXX 10</span></span><br></pre></td></tr></table></figure>\n<p>宏定义也可定义表达式：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD(a,b) (a)+(b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MUL(a,b) (a)*(b)</span></span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\">注意：如果要使用宏定义来代替表达式，需要在每个表达式的变量都加上括号以防止出现计算错误</font><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN1(a,b) a * b</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN2(a,b) (a)*(b)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,FUN1(a+b,b+a));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,FUN2(a+b,b+a));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行程序，输出：</span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\">答案：</span><br><span class=\"line\">FUN1的宏替换会变成：a+b*b+a</span><br><span class=\"line\">FUN2的宏替换会变成：(a+b)*(b+a)</span><br><span class=\"line\">因此两个宏替换会得到不同的结果。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"常变量\"><a href=\"#常变量\" class=\"headerlink\" title=\"常变量\"></a>常变量</h1><p>变量值不可改变的量，使用const修饰</p>\n<p><font color=\"red\">注意：const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。</font><br><br><br>常变量与宏定义常量的区别：宏定义常量是在预处理阶段，使用宏名来代替宏值。而常变量是在程序运行时，程序在内存分配的一个变量，只不过变量不允许再次赋值。<br><br><br>常量与后缀：<br>有时候我们需要显式地表示出常量的类型，这时候我们可以在常量后加后缀<br>u或U：unsigned类型，如123u<br>l或L：long类型，如123l<br>ll或LL：long long类型，如123456ll<br>f或F：float类型，如0.123f<br><br></p>\n"},{"title":"C语言数据类型","date":"2019-02-23T13:06:10.000Z","_content":"\n# int unsigned int short long\n## 整型int:\n大小：16位2字节 或 32位4字节（取决于编译器）\n存储格式：0~30位是数据位，第31位是符号位，用0代表正数，1代表负数。负数用补码存储。\n存储范围：-2^31 ~ 2^31-1\n打印格式：%d（十进制）、%o（八进制）、%x或%X（十六进制）\n如需要打印八进制和十六进制的特殊格式，加#\n%#o（打印八进制数，数前有0表示八进制数），%#x（打印十六进制数，数前有0x表示十六进制数）\n<br>\n常见的有十进制，八进制，十六进制三种数字进制。\n八进制输入输出格式化控制符使用%o或%#o。八进制数以0开头，如0666\n十六进制输入输出格式化控制符使用%x或%X或%#x或%#X。十六进制数以0x开头，如0x12345678\n## 无符号整型unsigned int:\n大小：同int型\n存储格式：0~31位都是数据位，无符号位\n存储范围：0 ~ 2^32-1\n打印格式：%u\n说明：\n与int型基本相同，区别是int型的符号位不再是符号位而也作为数据位，因此无符号整型数据比整型数据存储范围大2倍，不过无法存储负数\n适用于只有正数的情况\nunsigned关键字不仅仅可以修饰int类型，还可修饰short long char等类型。\n注意：unsigned关键字修饰的变量无法接收负数。\n无符号数的输入输出格式控制是%u\n## 短整型short：\n大小：16位2字节\n存储格式：0~14位为数据位，第15位为符号位，用0代表正数，1代表负数\n存储范围：-32768 ~ 32767\n打印格式：%hd\n说明：\nshort类型与int类型类似，只不过是16位，2字节。第15位为符号位，后面几位为数据位\nshort类型适用于存储不太大的数据，节省内存空间。\nshort类型的输入输出格式控制是%hd\n## 长整型long：\n大小：32位4字节\n存储格式：同32位int类型\n存储范围：同32位int类型\n打印格式：%ld\n说明：\n在过去的16位编译器中，int型是16位，所以long类型是32位。\n不过在现代的32位编译器中，int型与long类型已无本质区别。\n如果需要考虑程序跨平台移植（如16位编译器<--->32位编译器）需要谨慎选择使用int还是long\n## char类型：\n大小：8位1字节\n存储格式：0~6位都为数据位（128） 或 0~7位都为数据位（256，扩展后的ASCII表）\n存储范围：0 ~ 255\n打印格式：%c\n说明：char类型也属于整型数据类型（int、short、long）的一份子，只不过char类型运算时使用ASCII表来确定值。与其他三个整型数据类型不同的是，char类型默认就是unsigned类型，而其他三个则默认是signed类型。\n\n## long double类型：\n大小：96位12字节（取决于编译器，有8字节、10字节、12字节、16字节几种情况）\n存储格式：未知\n精度：不少于double类型\n存储范围：不少于double类型\n打印格式：%lf，%le","source":"_posts/C语言数据类型.md","raw":"---\ntitle: C语言数据类型\ndate: 2019-02-23 21:06:10\ntags: C语言\n---\n\n# int unsigned int short long\n## 整型int:\n大小：16位2字节 或 32位4字节（取决于编译器）\n存储格式：0~30位是数据位，第31位是符号位，用0代表正数，1代表负数。负数用补码存储。\n存储范围：-2^31 ~ 2^31-1\n打印格式：%d（十进制）、%o（八进制）、%x或%X（十六进制）\n如需要打印八进制和十六进制的特殊格式，加#\n%#o（打印八进制数，数前有0表示八进制数），%#x（打印十六进制数，数前有0x表示十六进制数）\n<br>\n常见的有十进制，八进制，十六进制三种数字进制。\n八进制输入输出格式化控制符使用%o或%#o。八进制数以0开头，如0666\n十六进制输入输出格式化控制符使用%x或%X或%#x或%#X。十六进制数以0x开头，如0x12345678\n## 无符号整型unsigned int:\n大小：同int型\n存储格式：0~31位都是数据位，无符号位\n存储范围：0 ~ 2^32-1\n打印格式：%u\n说明：\n与int型基本相同，区别是int型的符号位不再是符号位而也作为数据位，因此无符号整型数据比整型数据存储范围大2倍，不过无法存储负数\n适用于只有正数的情况\nunsigned关键字不仅仅可以修饰int类型，还可修饰short long char等类型。\n注意：unsigned关键字修饰的变量无法接收负数。\n无符号数的输入输出格式控制是%u\n## 短整型short：\n大小：16位2字节\n存储格式：0~14位为数据位，第15位为符号位，用0代表正数，1代表负数\n存储范围：-32768 ~ 32767\n打印格式：%hd\n说明：\nshort类型与int类型类似，只不过是16位，2字节。第15位为符号位，后面几位为数据位\nshort类型适用于存储不太大的数据，节省内存空间。\nshort类型的输入输出格式控制是%hd\n## 长整型long：\n大小：32位4字节\n存储格式：同32位int类型\n存储范围：同32位int类型\n打印格式：%ld\n说明：\n在过去的16位编译器中，int型是16位，所以long类型是32位。\n不过在现代的32位编译器中，int型与long类型已无本质区别。\n如果需要考虑程序跨平台移植（如16位编译器<--->32位编译器）需要谨慎选择使用int还是long\n## char类型：\n大小：8位1字节\n存储格式：0~6位都为数据位（128） 或 0~7位都为数据位（256，扩展后的ASCII表）\n存储范围：0 ~ 255\n打印格式：%c\n说明：char类型也属于整型数据类型（int、short、long）的一份子，只不过char类型运算时使用ASCII表来确定值。与其他三个整型数据类型不同的是，char类型默认就是unsigned类型，而其他三个则默认是signed类型。\n\n## long double类型：\n大小：96位12字节（取决于编译器，有8字节、10字节、12字节、16字节几种情况）\n存储格式：未知\n精度：不少于double类型\n存储范围：不少于double类型\n打印格式：%lf，%le","slug":"C语言数据类型","published":1,"updated":"2019-12-05T09:56:13.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3suhzjj0004eofhamc29v1z","content":"<h1 id=\"int-unsigned-int-short-long\"><a href=\"#int-unsigned-int-short-long\" class=\"headerlink\" title=\"int unsigned int short long\"></a>int unsigned int short long</h1><h2 id=\"整型int\"><a href=\"#整型int\" class=\"headerlink\" title=\"整型int:\"></a>整型int:</h2><p>大小：16位2字节 或 32位4字节（取决于编译器）<br>存储格式：0~30位是数据位，第31位是符号位，用0代表正数，1代表负数。负数用补码存储。<br>存储范围：-2^31 ~ 2^31-1<br>打印格式：%d（十进制）、%o（八进制）、%x或%X（十六进制）<br>如需要打印八进制和十六进制的特殊格式，加#<br>%#o（打印八进制数，数前有0表示八进制数），%#x（打印十六进制数，数前有0x表示十六进制数）<br><br><br>常见的有十进制，八进制，十六进制三种数字进制。<br>八进制输入输出格式化控制符使用%o或%#o。八进制数以0开头，如0666<br>十六进制输入输出格式化控制符使用%x或%X或%#x或%#X。十六进制数以0x开头，如0x12345678</p>\n<h2 id=\"无符号整型unsigned-int\"><a href=\"#无符号整型unsigned-int\" class=\"headerlink\" title=\"无符号整型unsigned int:\"></a>无符号整型unsigned int:</h2><p>大小：同int型<br>存储格式：0~31位都是数据位，无符号位<br>存储范围：0 ~ 2^32-1<br>打印格式：%u<br>说明：<br>与int型基本相同，区别是int型的符号位不再是符号位而也作为数据位，因此无符号整型数据比整型数据存储范围大2倍，不过无法存储负数<br>适用于只有正数的情况<br>unsigned关键字不仅仅可以修饰int类型，还可修饰short long char等类型。<br>注意：unsigned关键字修饰的变量无法接收负数。<br>无符号数的输入输出格式控制是%u</p>\n<h2 id=\"短整型short：\"><a href=\"#短整型short：\" class=\"headerlink\" title=\"短整型short：\"></a>短整型short：</h2><p>大小：16位2字节<br>存储格式：0~14位为数据位，第15位为符号位，用0代表正数，1代表负数<br>存储范围：-32768 ~ 32767<br>打印格式：%hd<br>说明：<br>short类型与int类型类似，只不过是16位，2字节。第15位为符号位，后面几位为数据位<br>short类型适用于存储不太大的数据，节省内存空间。<br>short类型的输入输出格式控制是%hd</p>\n<h2 id=\"长整型long：\"><a href=\"#长整型long：\" class=\"headerlink\" title=\"长整型long：\"></a>长整型long：</h2><p>大小：32位4字节<br>存储格式：同32位int类型<br>存储范围：同32位int类型<br>打印格式：%ld<br>说明：<br>在过去的16位编译器中，int型是16位，所以long类型是32位。<br>不过在现代的32位编译器中，int型与long类型已无本质区别。<br>如果需要考虑程序跨平台移植（如16位编译器<--->32位编译器）需要谨慎选择使用int还是long</---></p>\n<h2 id=\"char类型：\"><a href=\"#char类型：\" class=\"headerlink\" title=\"char类型：\"></a>char类型：</h2><p>大小：8位1字节<br>存储格式：0~6位都为数据位（128） 或 0~7位都为数据位（256，扩展后的ASCII表）<br>存储范围：0 ~ 255<br>打印格式：%c<br>说明：char类型也属于整型数据类型（int、short、long）的一份子，只不过char类型运算时使用ASCII表来确定值。与其他三个整型数据类型不同的是，char类型默认就是unsigned类型，而其他三个则默认是signed类型。</p>\n<h2 id=\"long-double类型：\"><a href=\"#long-double类型：\" class=\"headerlink\" title=\"long double类型：\"></a>long double类型：</h2><p>大小：96位12字节（取决于编译器，有8字节、10字节、12字节、16字节几种情况）<br>存储格式：未知<br>精度：不少于double类型<br>存储范围：不少于double类型<br>打印格式：%lf，%le</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"int-unsigned-int-short-long\"><a href=\"#int-unsigned-int-short-long\" class=\"headerlink\" title=\"int unsigned int short long\"></a>int unsigned int short long</h1><h2 id=\"整型int\"><a href=\"#整型int\" class=\"headerlink\" title=\"整型int:\"></a>整型int:</h2><p>大小：16位2字节 或 32位4字节（取决于编译器）<br>存储格式：0~30位是数据位，第31位是符号位，用0代表正数，1代表负数。负数用补码存储。<br>存储范围：-2^31 ~ 2^31-1<br>打印格式：%d（十进制）、%o（八进制）、%x或%X（十六进制）<br>如需要打印八进制和十六进制的特殊格式，加#<br>%#o（打印八进制数，数前有0表示八进制数），%#x（打印十六进制数，数前有0x表示十六进制数）<br><br><br>常见的有十进制，八进制，十六进制三种数字进制。<br>八进制输入输出格式化控制符使用%o或%#o。八进制数以0开头，如0666<br>十六进制输入输出格式化控制符使用%x或%X或%#x或%#X。十六进制数以0x开头，如0x12345678</p>\n<h2 id=\"无符号整型unsigned-int\"><a href=\"#无符号整型unsigned-int\" class=\"headerlink\" title=\"无符号整型unsigned int:\"></a>无符号整型unsigned int:</h2><p>大小：同int型<br>存储格式：0~31位都是数据位，无符号位<br>存储范围：0 ~ 2^32-1<br>打印格式：%u<br>说明：<br>与int型基本相同，区别是int型的符号位不再是符号位而也作为数据位，因此无符号整型数据比整型数据存储范围大2倍，不过无法存储负数<br>适用于只有正数的情况<br>unsigned关键字不仅仅可以修饰int类型，还可修饰short long char等类型。<br>注意：unsigned关键字修饰的变量无法接收负数。<br>无符号数的输入输出格式控制是%u</p>\n<h2 id=\"短整型short：\"><a href=\"#短整型short：\" class=\"headerlink\" title=\"短整型short：\"></a>短整型short：</h2><p>大小：16位2字节<br>存储格式：0~14位为数据位，第15位为符号位，用0代表正数，1代表负数<br>存储范围：-32768 ~ 32767<br>打印格式：%hd<br>说明：<br>short类型与int类型类似，只不过是16位，2字节。第15位为符号位，后面几位为数据位<br>short类型适用于存储不太大的数据，节省内存空间。<br>short类型的输入输出格式控制是%hd</p>\n<h2 id=\"长整型long：\"><a href=\"#长整型long：\" class=\"headerlink\" title=\"长整型long：\"></a>长整型long：</h2><p>大小：32位4字节<br>存储格式：同32位int类型<br>存储范围：同32位int类型<br>打印格式：%ld<br>说明：<br>在过去的16位编译器中，int型是16位，所以long类型是32位。<br>不过在现代的32位编译器中，int型与long类型已无本质区别。<br>如果需要考虑程序跨平台移植（如16位编译器<--->32位编译器）需要谨慎选择使用int还是long</---></p>\n<h2 id=\"char类型：\"><a href=\"#char类型：\" class=\"headerlink\" title=\"char类型：\"></a>char类型：</h2><p>大小：8位1字节<br>存储格式：0~6位都为数据位（128） 或 0~7位都为数据位（256，扩展后的ASCII表）<br>存储范围：0 ~ 255<br>打印格式：%c<br>说明：char类型也属于整型数据类型（int、short、long）的一份子，只不过char类型运算时使用ASCII表来确定值。与其他三个整型数据类型不同的是，char类型默认就是unsigned类型，而其他三个则默认是signed类型。</p>\n<h2 id=\"long-double类型：\"><a href=\"#long-double类型：\" class=\"headerlink\" title=\"long double类型：\"></a>long double类型：</h2><p>大小：96位12字节（取决于编译器，有8字节、10字节、12字节、16字节几种情况）<br>存储格式：未知<br>精度：不少于double类型<br>存储范围：不少于double类型<br>打印格式：%lf，%le</p>\n"},{"title":"DjangoNo.1","date":"2019-02-27T02:10:25.000Z","_content":"\n# Django学习No.1\n\n","source":"_posts/DjangoNo-1.md","raw":"---\ntitle: DjangoNo.1\ndate: 2019-02-27 10:10:25\ntags: Djago\n---\n\n# Django学习No.1\n\n","slug":"DjangoNo-1","published":1,"updated":"2019-12-05T09:56:13.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3suhzjl0005eofhnslp86em","content":"<h1 id=\"Django学习No-1\"><a href=\"#Django学习No-1\" class=\"headerlink\" title=\"Django学习No.1\"></a>Django学习No.1</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Django学习No-1\"><a href=\"#Django学习No-1\" class=\"headerlink\" title=\"Django学习No.1\"></a>Django学习No.1</h1>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-12-05T14:25:10.775Z","updated":"2019-12-05T09:56:13.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3suhzjm0006eofh6wh2m2sz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck3suhzj90000eofh5bp1hrsg","tag_id":"ck3suhzjh0003eofhi85e9fmx","_id":"ck3suhzjp0008eofh8fips20o"},{"post_id":"ck3suhzjf0002eofhxpl4p769","tag_id":"ck3suhzjh0003eofhi85e9fmx","_id":"ck3suhzjr000aeofh8mmu54dd"},{"post_id":"ck3suhzjj0004eofhamc29v1z","tag_id":"ck3suhzjh0003eofhi85e9fmx","_id":"ck3suhzjs000ceofhunm7niya"},{"post_id":"ck3suhzjl0005eofhnslp86em","tag_id":"ck3suhzjr000beofhbtan70l6","_id":"ck3suhzjt000deofhmlyu4l3y"}],"Tag":[{"name":"C语言","_id":"ck3suhzjh0003eofhi85e9fmx"},{"name":"Djago","_id":"ck3suhzjr000beofhbtan70l6"}]}}